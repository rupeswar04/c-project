#include <iostream>
#include <cstdlib>
#include <ctime>
#include <algorithm>

using namespace std;

char board[3][3];
char player = 'X', aiPlayer = 'O';
bool vsComputer = false;

void initializeBoard() {
    // Fill board with numbers 1-9 for positions
    char position = '1';
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            board[i][j] = position++;
        }
    }
}

void displayBoard() {
    cout << "\n";
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << " " << board[i][j] << " ";
            if (j < 2) cout << "|";
        }
        cout << "\n";
        if (i < 2) cout << "---|---|---\n";
    }
    cout << "\n";
}

bool checkWin(char currentPlayer) {
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) return true; // Rows
        if (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer) return true; // Columns
    }
    if (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) return true; // Diagonal
    if (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer) return true; // Diagonal
    return false;
}

bool checkDraw() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] != 'X' && board[i][j] != 'O') return false;
    return true;
}

void playerMove() {
    int choice;
    while (true) {
        cout << "Enter your move (1-9): ";
        cin >> choice;

        if (choice < 1 || choice > 9) {
            cout << "Invalid move! Try again.\n";
            continue;
        }

        int row = (choice - 1) / 3;
        int col = (choice - 1) % 3;
        
        if (board[row][col] == 'X' || board[row][col] == 'O') {
            cout << "Position already taken! Try again.\n";
        } else {
            board[row][col] = player;
            break;
        }
    }
}

int evaluateBoard() {
    if (checkWin(aiPlayer)) return 10;
    else if (checkWin(player)) return -10;
    else return 0;
}

int minimax(int depth, bool isMaximizing) {
    int score = evaluateBoard();
    if (score == 10 || score == -10 || checkDraw()) return score;

    if (isMaximizing) {
        int bestScore = -1000;
        int availableMoves[9];
        int availableMovesCount = 0;
        
        // Collect available moves
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] != 'X' && board[i][j] != 'O') {
                    availableMoves[availableMovesCount++] = i * 3 + j;
                }
            }
        }
        
        // Randomize the order of available moves
        random_shuffle(availableMoves, availableMoves + availableMovesCount);
        
        for (int i = 0; i < availableMovesCount; i++) {
            int move = availableMoves[i];
            int row = move / 3;
            int col = move % 3;
            board[row][col] = aiPlayer;
            int currentScore = minimax(depth + 1, false);
            board[row][col] = (char)(move + '1');
            bestScore = max(bestScore, currentScore);
        }
        
        return bestScore;
    } else {
        int bestScore = 1000;
        int availableMoves[9];
        int availableMovesCount = 0;
        
        // Collect available moves
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] != 'X' && board[i][j] != 'O') {
                    availableMoves[availableMovesCount++] = i * 3 + j;
                }
            }
        }
        
        // Randomize the order of available moves
        random_shuffle(availableMoves, availableMoves + availableMovesCount);
        
        for (int i = 0; i < availableMovesCount; i++) {
            int move = availableMoves[i];
            int row = move / 3;
            int col = move % 3;
            board[row][col] = player;
            int currentScore = minimax(depth + 1, true);
            board[row][col] = (char)(move + '1');
            bestScore = min(bestScore, currentScore);
        }
        
        return bestScore;
    }
}

void aiMove() {
    int availableMoves[9];
    int availableMovesCount = 0;
    
    // Collect available moves
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] != 'X' && board[i][j] != 'O') {
                availableMoves[availableMovesCount++] = i * 3 + j;
            }
        }
    }
    
    // Randomize the order of available moves
    random_shuffle(availableMoves, availableMoves + availableMovesCount);
    
    int bestScore = -1000;
    int bestMove = -1;
    for (int i = 0; i < availableMovesCount; i++) {
        int move = availableMoves[i];
        int row = move / 3;
        int col = move % 3;
        board[row][col] = aiPlayer;
        int currentScore = minimax(0, false);
        board[row][col] = (char)(move + '1');
        if (currentScore > bestScore) {
            bestScore = currentScore;
            bestMove = move;
        }
    }

    int row = bestMove / 3;
    int col = bestMove % 3;
    board[row][col] = aiPlayer;
    cout << "Computer chose position: " << bestMove + 1 << "\n";
}

void switchPlayer() {
    if (vsComputer) {
        player = (player == 'X') ? aiPlayer : 'X'; // Switch between human and AI
    } else {
        player = (player == 'X') ? 'O' : 'X'; // Switch between two human players
    }
}

void gameLoop() {
    initializeBoard();
    player = 'X';
    bool gameWon = false, gameDraw = false;

    while (true) {
        displayBoard();
        if (player == 'X' || !vsComputer) {
            cout << "Player " << player << "'s turn.\n";
            playerMove();
        } else {
            cout << "Computer's turn.\n";
            aiMove();
        }

        gameWon = checkWin(player);
        gameDraw = checkDraw();

        if (gameWon) {
            displayBoard();
            if (player == 'X' || !vsComputer) {
                cout << "Player " << player << " wins!\n";
            } else {
                cout << "Computer wins!\n";
            }
            break;
        } else if (gameDraw) {
            displayBoard();
            cout << "It's a draw!\n";
            break;
        }
        switchPlayer();
    }
}

int main() {
    char playAgain;
    cout << "Welcome to Tic-Tac-Toe!\n";
    cout << "Do you want to play against the computer? (y/n): ";
    char response;
    cin >> response;
    vsComputer = (response == 'y' || response == 'Y');

    do {
        gameLoop();
        cout << "Do you want to play again? (y/n): ";
        cin >> playAgain;
    } while (playAgain == 'y' || playAgain == 'Y');

    cout << "Thanks for playing!\n";
    return 0;
}
